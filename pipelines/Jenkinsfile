pipeline {

  environment { // MARK: Environment Variables
    NPM_TOKEN            = credentials('npmjs-access-token')
    EMAIL_ADDRESS        = credentials('email_builds')

    OWNER_REPOSITORY     = "etendosoftware"
    GITHUB_URL           = "https://github.com"
    GITHUB_SSH_URL       = "git@github.com:etendosoftware"

    SUCCESS              = "SUCCESS"
    FAILED               = "FAILED"
    UNSTABLE             = "UNSTABLE"

    COMMIT_INPROGRESS_STATUS = "pending"
    COMMIT_SUCCESS_STATUS    = "success"
    COMMIT_FAILED_STATUS     = "failure"

    CONTEXT_BUILD = "New UI Tests"

    ACCESS_TOKEN = credentials('access_token_github')

    NODE_VERSION = "18"

    REPOSITORY_NAME = "com.etendorx.workspace-ui"
  }

  agent { // MARK: Agent
    kubernetes {
      inheritFrom 'jenkins-node-app'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-app
  namespace: jenkins2025
  labels:
    app.kubernetes.io/name: jenkins-node-app
spec:
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: ''
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.7-jdk.17.0.13
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 4000Mi
        requests:
          cpu: 1048m
          memory: 2000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      securityContext:
        readOnlyRootFilesystem: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext: {}
    """
    }
  }

  stages {
    stage('Building Environment') { // MARK: Building Environment
      steps {
        container('compiler') {
          script {

            sh "./pipelines/utils/repo-update-scripts/build-update-github.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Starting Build\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
            try {
              withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                sh "GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git clone ${GITHUB_SSH_URL}/${REPOSITORY_NAME}.git"
              }
              
              echo "-------------------------- Building Environment --------------------------"
              sh """
                curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
                apt-get install -y nodejs
                npm install -g pnpm
                npm config set registry \"https://registry.npmjs.org/\"
                npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
              """

              echo "-------------------------- Checking out the repository to GIT_COMMIT --------------------------"
              sh """
                cd ${REPOSITORY_NAME}
                git checkout ${GIT_COMMIT}
              """

              echo "-------------------------- Installing Dependencies --------------------------"
              sh """
                cd ${REPOSITORY_NAME}
                pnpm install
                pnpm add -D -w istanbul-lib-coverage istanbul-lib-report istanbul-reports
              """
              echo "-------------------------- Building Project --------------------------"
              sh """
                cd ${REPOSITORY_NAME}
                pnpm build
              """
              echo "-------------------------- Build Successful --------------------------"
              
              echo "-------------------------- Getting Commit Information --------------------------"
              def rootDir = pwd()
              def infoCommit = load "${rootDir}/pipelines/utils/infoCommits.groovy"
              env.URL_ORG_GITHUB = "${GITHUB_URL}/${OWNER_REPOSITORY}"
              def commitInfoTemplate = infoCommit.generateCommitInfo(env.URL_ORG_GITHUB, null, REPOSITORY_NAME, true, REPOSITORY_NAME)
              env.COMMIT_INFO_TEMPLATE = "${commitInfoTemplate}"
              echo "${env.COMMIT_INFO_TEMPLATE}"

              currentBuild.result = SUCCESS
            } catch (Exception e) {
              env.ERROR_MESSAGE = "Environment Building Failed"
              echo "Exception occurred: " + e.toString()
              echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
              currentBuild.result = FAILED
              error(env.ERROR_MESSAGE)
            }
          }
        }
      }
    }

    stage('Running Tests') { // MARK: Running Tests
      when {
        expression {
          currentBuild.result == SUCCESS
        }
      }
      steps {
        container('compiler') {
          script {
            try {
              sh "./pipelines/utils/repo-update-scripts/build-update-github.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Running Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
              env.STATUSTEST = "1"
              echo "-------------------------- Running Tests --------------------------"
              sh """
                cd ${REPOSITORY_NAME}
                pnpm test:mainui:coverage
                pnpm test:api-client:coverage
                pnpm test:component-library:coverage
              """
              sh """
                cd ${REPOSITORY_NAME}
                node pipelines/utils/merge-coverage.cjs
              """
              echo "-------------------------- Tests Succesful --------------------------"
              currentBuild.result = SUCCESS
            } catch (Exception e) {
              env.ERROR_MESSAGE = "Failed Tests"
              echo "Exception occurred: " + e.toString()
              echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
              currentBuild.result = UNSTABLE
              unstable(env.ERROR_MESSAGE)
            }
          }
        }
      }
    }

    stage('UI/Storybook Tests') { // MARK: STORYBOOK
        when {
            expression {
                false
            }
        }
        steps {
            container('compiler') {
                timeout(time: 25, unit: 'MINUTES') {
                    sh """
                    cd ${REPOSITORY_NAME}

                    pnpm run storybook -- --host 127.0.0.1 --port 6006 --quiet &
                    SB_PID=\$!
                    trap "kill \$SB_PID || true" EXIT

                    # 2) (Opcional) Instalar browsers de Playwright si tu imagen no los trae
                    pnpm dlx playwright install --with-deps chromium

                    # 3) Esperar a que el server estÃ© listo
                    pnpm dlx wait-on --timeout 180000 http://127.0.0.1:6006/index.json

                    # 4) Ejecutar el runner desde el paquete de storybook
                    cd packages/storybook
                    pnpm test-storybook --ci --url http://127.0.0.1:6006 --maxWorkers=2 
                    """
                }
            }
        }
    }

    stage('Run Sonarqube Analysis') { // MARK: Run Sonarqube Analysis
      when {
        expression {
          currentBuild.result == SUCCESS
        }
      }
      environment {
          scannerHome = tool 'etendo-sonar-scanner';
          JAVA_HOME = '/usr/lib/jvm/jdk-17.0.13'
      }
      steps {
        container('compiler') {
          script {
            try {
              sh "./pipelines/utils/repo-update-scripts/build-update-github.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Running SonarQube Analysis\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
              echo "-------------------------- Running SonarQube Analysis --------------------------"
              withSonarQubeEnv(credentialsId: 'sonar-token-access', installationName: 'SonarQubeServer') {
                sh """
                  cd ${REPOSITORY_NAME}
                  ${scannerHome}/bin/sonar-scanner \
                  -Dsonar.branch.name=${GIT_BRANCH} \
                  -Dsonar.javascript.lcov.reportPaths=coverage-merged/lcov.info
                """
              }
              echo "-------------------------- SonarQube Analysis Succesful --------------------------"
            } catch (Exception e) {
              env.ERROR_MESSAGE = "Failed SonarQube Analysis"
              echo "Exception occurred: " + e.toString()
              echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
              currentBuild.result = FAILED
              unstable(env.ERROR_MESSAGE)
            }
          }
        }
      }
    }
  }
    
  post { // MARK: Post Actions
    success {
      script {
        sh "./pipelines/utils/repo-update-scripts/build-update-github.sh ${REPOSITORY_NAME} ${COMMIT_SUCCESS_STATUS} \"Successful Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
      }
    }

    unstable {
      script {
        sh "./pipelines/utils/repo-update-scripts/build-update-github.sh ${REPOSITORY_NAME} ${COMMIT_FAILED_STATUS} \"Failed Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
      }
      mail to: EMAIL_ADDRESS,
      subject: "ðŸš¨ Failed Tests of '${REPOSITORY_NAME}' - ${currentBuild.fullDisplayName}",
      mimeType: "text/html",
      body: """
        <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
            <p><em>${new Date()}</em></p>
            <p>__________________________________________________________</p>

            <h2 class="header">ðŸš¨ BUILD UNSTABLE ðŸš¨</h2>

            ${env.COMMIT_INFO_TEMPLATE}

            <p>The tests of '${REPOSITORY_NAME}' have failed.<br>Check out the output in the following link: ${env.BUILD_URL}

            <p class="footer"><em>Best regards,<br>#EtendoBot ðŸ¤–</em></p>
            <p>__________________________________________________________</p>
          </body>
        </html>
      """
    }
    
    failure {
      script {
        sh "./pipelines/utils/repo-update-scripts/build-update-github.sh ${REPOSITORY_NAME} ${COMMIT_FAILED_STATUS} \"Build Failed\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
      }
      mail to: EMAIL_ADDRESS,
      subject: "ðŸš« ${env.ERROR_MESSAGE} in '${REPOSITORY_NAME}' - ${currentBuild.fullDisplayName}",
      mimeType: "text/html",
      body:  """
        <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
            <p><em>${new Date()}</em></p>
            <p>__________________________________________________________</p>

            <h2 class="header">ðŸš« BUILD FAILED ðŸš«</h2>

            ${env.COMMIT_INFO_TEMPLATE}

            <p>${env.ERROR_MESSAGE}. This failure isn't likely to be caused by failing tests.<br>To more information on the failing run visit: ${env.BUILD_URL}</p>

            <p class="footer"><em>Best regards,<br>#EtendoBot ðŸ¤–</em></p>
            <p>__________________________________________________________</p>
          </body>
        </html>
      """
    }
  }
}