From 2fd8287b88960bbd052483b623590f2578032213 Mon Sep 17 00:00:00 2001
From: Luciano Rocha <luciano.rocha@etendo.software>
Date: Wed, 26 Mar 2025 21:11:04 -0300
Subject: [PATCH 1/1] Feature ETP-1321: Fix performance issues

---
 .../src/components/IconButton/index.tsx       |   6 +-
 .../src/components/PrimaryTab/styles.ts       |   3 +
 .../ComponentLibrary/src/locales/index.ts     |   6 +-
 packages/EtendoHookBinder/src/api/metadata.ts |  11 +-
 packages/EtendoHookBinder/src/api/types.ts    |   2 +
 .../MainUI/{.svgrrc.json => .svgrrc.json.old} |   0
 packages/MainUI/app/App.tsx                   |   8 +-
 packages/MainUI/app/loading.tsx               |   6 +
 packages/MainUI/app/not-found.tsx             |  25 ++-
 .../[windowId]/[tabId]/[recordId]/page.tsx    |   3 +-
 packages/MainUI/components/ErrorDisplay.tsx   |   2 +-
 .../MainUI/components/Form/Collapsible.tsx    |   7 +-
 .../MainUI/components/Form/FormView/Label.tsx |   8 +-
 .../components/Form/FormView/StatusBar.tsx    |   2 +-
 .../Form/FormView/StatusBarField.tsx          |  29 +++-
 .../MainUI/components/Form/FormView/index.tsx |  28 ++-
 .../Form/FormView/selectors/BaseSelector.tsx  |  16 +-
 .../FormView/selectors/BooleanSelector.tsx    |   2 +-
 .../Form/FormView/selectors/DateSelector.tsx  |   2 +-
 .../FormView/selectors/GenericSelector.tsx    |  12 +-
 .../Form/FormView/selectors/ListSelector.tsx  |   2 +-
 .../FormView/selectors/NumericSelector.tsx    |   1 +
 .../FormView/selectors/QuantitySelector.tsx   |  11 +-
 .../FormView/selectors/SelectSelector.tsx     |  51 +-----
 .../FormView/selectors/StringSelector.tsx     |   4 +-
 .../FormView/selectors/TableDirSelector.tsx   |  39 +----
 .../selectors/components/DateInput.tsx        |  40 +++--
 .../FormView/selectors/components/Select.tsx  | 159 ++++++++++--------
 .../FormView/selectors/components/Switch.tsx  |   9 +-
 .../selectors/components/TextInput.tsx        |  15 +-
 .../FormView/selectors/components/types.ts    |   6 +-
 .../MainUI/components/Form/FormView/types.ts  |   1 +
 .../MainUI/components/ProcessModal/index.tsx  |   4 +-
 .../MainUI/components/Toolbar/ProcessMenu.tsx |  26 +--
 .../MainUI/components/Toolbar/Toolbar.tsx     |  12 +-
 packages/MainUI/components/loading.tsx        |  14 ++
 packages/MainUI/contexts/api/index.tsx        |  50 +++---
 .../MainUI/contexts/api/mainui.code-workspace |  11 --
 packages/MainUI/contexts/api/wrapper.tsx      |   6 +
 packages/MainUI/contexts/languageProvider.tsx |   7 +-
 packages/MainUI/contexts/user.tsx             |  13 +-
 .../MainUI/hooks/Toolbar/useProcessButton.ts  |   3 +
 .../hooks/Toolbar/useProcessExecution.ts      |   6 +-
 .../hooks/datasource/useTableDirDatasource.ts |  12 +-
 packages/MainUI/hooks/useFormAction.ts        |  63 +++----
 .../MainUI/hooks/useSelectFieldOptions.ts     |  32 ++++
 packages/MainUI/next.config.ts                |  51 +++---
 packages/MainUI/screens/Loading/index.tsx     |  13 --
 packages/MainUI/screens/NewRecord/index.tsx   |  38 +++++
 packages/MainUI/screens/Table/Dynamic.tsx     |  11 +-
 packages/MainUI/tsconfig.json                 |   9 +-
 packages/MainUI/utils/health-check.ts         |   4 +-
 packages/MainUI/utils/index.ts                | 104 +++++++++---
 packages/MainUI/utils/language.ts             |  36 ++++
 54 files changed, 624 insertions(+), 417 deletions(-)
 rename packages/MainUI/{.svgrrc.json => .svgrrc.json.old} (100%)
 create mode 100644 packages/MainUI/app/loading.tsx
 create mode 100644 packages/MainUI/components/loading.tsx
 delete mode 100644 packages/MainUI/contexts/api/mainui.code-workspace
 create mode 100644 packages/MainUI/contexts/api/wrapper.tsx
 create mode 100644 packages/MainUI/hooks/useSelectFieldOptions.ts
 delete mode 100644 packages/MainUI/screens/Loading/index.tsx
 create mode 100644 packages/MainUI/screens/NewRecord/index.tsx
 create mode 100644 packages/MainUI/utils/language.ts

diff --git a/packages/ComponentLibrary/src/components/IconButton/index.tsx b/packages/ComponentLibrary/src/components/IconButton/index.tsx
index 11152bb8..c46372f8 100644
--- a/packages/ComponentLibrary/src/components/IconButton/index.tsx
+++ b/packages/ComponentLibrary/src/components/IconButton/index.tsx
@@ -1,11 +1,11 @@
 'use client';
 
-import React, { useState, useCallback, useEffect, useMemo } from 'react';
+import React, { useState, useCallback, useEffect, useMemo, memo } from 'react';
 import { Tooltip, IconButton as MUIIconButton, Box, Typography, useTheme } from '@mui/material';
 import { useStyle } from './styles';
 import { IIconComponentProps } from './types';
 
-const IconButton: React.FC<IIconComponentProps> = ({
+const IconButtonCmp: React.FC<IIconComponentProps> = ({
   fill,
   hoverFill,
   width = 24,
@@ -89,4 +89,6 @@ const IconButton: React.FC<IIconComponentProps> = ({
   );
 };
 
+const IconButton = memo(IconButtonCmp);
+export { IconButton };
 export default IconButton;
diff --git a/packages/ComponentLibrary/src/components/PrimaryTab/styles.ts b/packages/ComponentLibrary/src/components/PrimaryTab/styles.ts
index 83f28545..fd02f182 100644
--- a/packages/ComponentLibrary/src/components/PrimaryTab/styles.ts
+++ b/packages/ComponentLibrary/src/components/PrimaryTab/styles.ts
@@ -35,6 +35,9 @@ export const useStyle = () => {
               opacity: 0.3,
             },
           },
+          '& .MuiTabs-flexContainer': {
+            gap: "0.25rem",
+          },
         },
         tab: {
           minHeight: 48,
diff --git a/packages/ComponentLibrary/src/locales/index.ts b/packages/ComponentLibrary/src/locales/index.ts
index be670aba..dda003d5 100644
--- a/packages/ComponentLibrary/src/locales/index.ts
+++ b/packages/ComponentLibrary/src/locales/index.ts
@@ -1,11 +1,13 @@
-import { Translations } from './types';
-
+import { Translations, Language } from './types';
 import es_ES from './es';
 import en_US from './en';
 
+const DEFAULT_LANGUAGE: Language = 'en_US';
 const translations: Translations = {
   es_ES,
   en_US,
 };
 
 export default translations;
+export { DEFAULT_LANGUAGE, translations };
+export type { Language, Translations };
diff --git a/packages/EtendoHookBinder/src/api/metadata.ts b/packages/EtendoHookBinder/src/api/metadata.ts
index 90f79fe5..d58d2f09 100644
--- a/packages/EtendoHookBinder/src/api/metadata.ts
+++ b/packages/EtendoHookBinder/src/api/metadata.ts
@@ -72,10 +72,7 @@ export class Metadata {
     }
   }
 
-  private static async _getTab(tabId?: Etendo.Tab["id"]): Promise<Etendo.Tab | undefined> {
-    if (!tabId) {
-      return;
-    }
+  private static async _getTab(tabId?: Etendo.Tab["id"]): Promise<Etendo.Tab> {
     const { data } = await this.client.post(`tab/${tabId}`);
 
     this.cache.set(`tab-${tabId}`, data);
@@ -83,11 +80,7 @@ export class Metadata {
     return data;
   }
 
-  public static async getTab(tabId?: Etendo.Tab["id"]): Promise<Etendo.Tab | undefined> {
-    if (!tabId) {
-      return;
-    }
-
+  public static async getTab(tabId: Etendo.Tab["id"]): Promise<Etendo.Tab> {
     const cached = this.cache.get<Etendo.Tab>(`tab-${tabId}`);
 
     if (cached) {
diff --git a/packages/EtendoHookBinder/src/api/types.ts b/packages/EtendoHookBinder/src/api/types.ts
index 573c6700..beb461fc 100644
--- a/packages/EtendoHookBinder/src/api/types.ts
+++ b/packages/EtendoHookBinder/src/api/types.ts
@@ -111,6 +111,8 @@ export interface Field {
   isDisplayed: boolean;
   sequenceNumber: number;
   isUpdatable: boolean;
+  description: string;
+  helpComment: string;
 }
 
 export interface Option<T extends string = string> {
diff --git a/packages/MainUI/.svgrrc.json b/packages/MainUI/.svgrrc.json.old
similarity index 100%
rename from packages/MainUI/.svgrrc.json
rename to packages/MainUI/.svgrrc.json.old
diff --git a/packages/MainUI/app/App.tsx b/packages/MainUI/app/App.tsx
index 536c9826..7ef1040d 100644
--- a/packages/MainUI/app/App.tsx
+++ b/packages/MainUI/app/App.tsx
@@ -1,16 +1,14 @@
-'use client';
-
 import { RecordProvider } from '@/contexts/record';
-import SanityChecker from '../contexts/api';
 import LanguageProvider from '../contexts/languageProvider';
 import MetadataProvider from '../contexts/metadata';
 import UserProvider from '../contexts/user';
 import { DatasourceProvider } from '@/contexts/datasourceContext';
+import ApiProviderWrapper from '@/contexts/api/wrapper';
 
 export default function App({ children }: React.PropsWithChildren) {
   return (
     <LanguageProvider>
-      <SanityChecker>
+      <ApiProviderWrapper>
         <RecordProvider>
           <UserProvider>
             <DatasourceProvider>
@@ -18,7 +16,7 @@ export default function App({ children }: React.PropsWithChildren) {
             </DatasourceProvider>
           </UserProvider>
         </RecordProvider>
-      </SanityChecker>
+      </ApiProviderWrapper>
     </LanguageProvider>
   );
 }
diff --git a/packages/MainUI/app/loading.tsx b/packages/MainUI/app/loading.tsx
new file mode 100644
index 00000000..41607802
--- /dev/null
+++ b/packages/MainUI/app/loading.tsx
@@ -0,0 +1,6 @@
+import Loading from '@/components/loading';
+import { getLanguage } from '@/utils/language';
+
+export default function LoadingScreen() {
+  return <Loading language={getLanguage()} />;
+}
diff --git a/packages/MainUI/app/not-found.tsx b/packages/MainUI/app/not-found.tsx
index dce9da7e..945b4458 100644
--- a/packages/MainUI/app/not-found.tsx
+++ b/packages/MainUI/app/not-found.tsx
@@ -1,23 +1,20 @@
-'use client';
-
 import Link from 'next/link';
-import Logo from '../public/etendo.svg?url';
-import Image from 'next/image';
-import { useTranslation } from '../hooks/useTranslation';
 import { Button } from '@mui/material';
+import { getLanguage, t } from '@/utils/language';
+import { ErrorDisplay } from '@/components/ErrorDisplay';
 
 export default function NotFound() {
-  const { clientWidth, clientHeight } = window.document.body;
-  const { t } = useTranslation();
+  const language = getLanguage();
 
   return (
-    <div className="center-all flex-column">
-      <Image src={Logo} width={clientWidth} height={clientHeight} alt="Etendo" className="etendo-logo" />
-      <h2>{t('errors.notFound.title')}</h2>
-      <p>{t('errors.notFound.description')}</p>
-      <Link href="/">
-        <Button variant="contained">{t('navigation.common.home')}</Button>
-      </Link>
+    <div className="w-full min-h-full flex items-center justify-center">
+      <ErrorDisplay
+        title={t(language, 'errors.notFound.title')}
+        description={t(language, 'errors.notFound.description')}>
+        <Link href="/">
+          <Button variant="contained">{t(language, 'navigation.common.home')}</Button>
+        </Link>
+      </ErrorDisplay>
     </div>
   );
 }
diff --git a/packages/MainUI/app/window/[windowId]/[tabId]/[recordId]/page.tsx b/packages/MainUI/app/window/[windowId]/[tabId]/[recordId]/page.tsx
index 0be5ca90..17b81239 100644
--- a/packages/MainUI/app/window/[windowId]/[tabId]/[recordId]/page.tsx
+++ b/packages/MainUI/app/window/[windowId]/[tabId]/[recordId]/page.tsx
@@ -1,7 +1,6 @@
 'use client';
 
 import { FormMode, Tab, WindowMetadata } from '@workspaceui/etendohookbinder/src/api/types';
-import Spinner from '@workspaceui/componentlibrary/src/components/Spinner';
 import { useTranslation } from '@/hooks/useTranslation';
 import { useParams } from 'next/navigation';
 import { useFormInitialization } from '@/hooks/useFormInitialization';
@@ -36,7 +35,7 @@ function Page({ window, tab }: { window: WindowMetadata; tab: Tab }) {
   }
 
   if (loading || !initialState) {
-    return <Spinner />;
+    return null;
   }
 
   return <FormView mode={FormMode.EDIT} tab={tab} window={window} initialState={initialState} />;
diff --git a/packages/MainUI/components/ErrorDisplay.tsx b/packages/MainUI/components/ErrorDisplay.tsx
index c958c372..47bf7ffc 100644
--- a/packages/MainUI/components/ErrorDisplay.tsx
+++ b/packages/MainUI/components/ErrorDisplay.tsx
@@ -18,7 +18,7 @@ export function ErrorDisplay({
   const { t } = useTranslation();
 
   return (
-    <div className="w-full  max-w-md p-8 mx-auto bg-white rounded-lg shadow-md flex flex-col items-center">
+    <div className="w-full max-w-md p-8 mx-auto bg-white rounded-lg shadow-md flex flex-col items-center">
       <div className="mb-6 max-w-xs">
         <Image src={errorImage} width={240} height={240} alt="Error" className="mx-auto" priority />
       </div>
diff --git a/packages/MainUI/components/Form/Collapsible.tsx b/packages/MainUI/components/Form/Collapsible.tsx
index bd4a9401..a5f40658 100644
--- a/packages/MainUI/components/Form/Collapsible.tsx
+++ b/packages/MainUI/components/Form/Collapsible.tsx
@@ -1,6 +1,6 @@
 'use client';
 
-import React, { CSSProperties, useCallback, useEffect, useMemo, useRef, useState } from 'react';
+import React, { CSSProperties, memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';
 import ChevronUp from '@workspaceui/componentlibrary/src/assets/icons/chevron-up.svg';
 import ChevronDown from '@workspaceui/componentlibrary/src/assets/icons/chevron-down.svg';
 import InfoIcon from '@workspaceui/componentlibrary/src/assets/icons/file-text.svg';
@@ -9,7 +9,7 @@ import { defaultFill, useStyle } from './FormView/styles';
 import { useTheme } from '@mui/material';
 import { CollapsibleProps } from './FormView/types';
 
-export default function Collapsible({
+function CollapsibleCmp({
   title,
   icon,
   children,
@@ -133,3 +133,6 @@ export default function Collapsible({
     </div>
   );
 }
+
+export const Collapsible = memo(CollapsibleCmp);
+export default Collapsible;
diff --git a/packages/MainUI/components/Form/FormView/Label.tsx b/packages/MainUI/components/Form/FormView/Label.tsx
index c63b587b..8e0fb33c 100644
--- a/packages/MainUI/components/Form/FormView/Label.tsx
+++ b/packages/MainUI/components/Form/FormView/Label.tsx
@@ -1,4 +1,4 @@
-import { useMemo } from 'react';
+import { memo, useMemo } from 'react';
 import Link from 'next/link';
 import { useFormContext } from 'react-hook-form';
 import { isEntityReference } from '@workspaceui/etendohookbinder/src/utils/metadata';
@@ -13,7 +13,7 @@ const Content = ({ field, link }: { field: Field; link?: boolean }) => (
   </label>
 );
 
-export default function Label({ field }: { field: Field }) {
+function LabelCmp({ field }: { field: Field }) {
   const { watch } = useFormContext();
   const value = watch(field.hqlName);
   const isReference = useMemo(() => isEntityReference(getFieldReference(field)), [field]);
@@ -28,3 +28,7 @@ export default function Label({ field }: { field: Field }) {
 
   return <Content field={field} />;
 }
+
+const Label = memo(LabelCmp, () => true);
+export { Label };
+export default Label;
diff --git a/packages/MainUI/components/Form/FormView/StatusBar.tsx b/packages/MainUI/components/Form/FormView/StatusBar.tsx
index 3be004ce..14a6b99f 100644
--- a/packages/MainUI/components/Form/FormView/StatusBar.tsx
+++ b/packages/MainUI/components/Form/FormView/StatusBar.tsx
@@ -3,7 +3,7 @@ import StatusBarField from './StatusBarField';
 
 export default function StatusBar({ fields }: { fields: Record<string, Field> }) {
   return (
-    <div className="flex gap-4 bg-gray-200 text-sm p-4 rounded-2xl">
+    <div className="flex gap-4 bg-gray-100/50 shadow text-sm px-4 py-3 rounded-xl">
       {Object.entries(fields).map(([key, field]) => (
         <StatusBarField key={key} field={field} />
       ))}
diff --git a/packages/MainUI/components/Form/FormView/StatusBarField.tsx b/packages/MainUI/components/Form/FormView/StatusBarField.tsx
index 7f490f20..a8cfa37f 100644
--- a/packages/MainUI/components/Form/FormView/StatusBarField.tsx
+++ b/packages/MainUI/components/Form/FormView/StatusBarField.tsx
@@ -1,15 +1,36 @@
-import { Field } from '@workspaceui/etendohookbinder/src/api/types';
+import { formatNumber, getFieldReference } from '@/utils';
+import { Field, FieldType } from '@workspaceui/etendohookbinder/src/api/types';
+import { useMemo } from 'react';
 import { useFormContext } from 'react-hook-form';
 
 export default function StatusBarField({ field }: { field: Field }) {
   const { register, watch } = useFormContext();
   const [value, identifier] = watch([field.hqlName, field.hqlName + '$_identifier']);
+  const displayValue = useMemo(() => {
+    if (identifier) {
+      return identifier;
+    }
+
+    switch (getFieldReference(field)) {
+      case FieldType.DATE:
+        return new Date(value).toLocaleDateString();
+      case FieldType.BOOLEAN:
+        return value ? 'Y' : 'N';
+      case FieldType.NUMBER:
+      case FieldType.QUANTITY:
+        return formatNumber(value);
+      default:
+        return value;
+    }
+  }, [field, identifier, value]);
 
   return (
     <div className="inline-flex gap-1">
-      <label htmlFor={field.hqlName}>{field.name}:</label>
-      <span className="font-bold" {...register(field.hqlName)}>
-        {identifier ?? value}
+      <label htmlFor={field.hqlName} className="font-semibold">
+        {field.name}:
+      </label>
+      <span className="" {...register(field.hqlName)}>
+        {displayValue}
       </span>
     </div>
   );
diff --git a/packages/MainUI/components/Form/FormView/index.tsx b/packages/MainUI/components/Form/FormView/index.tsx
index 7467e017..c3f7acde 100644
--- a/packages/MainUI/components/Form/FormView/index.tsx
+++ b/packages/MainUI/components/Form/FormView/index.tsx
@@ -23,7 +23,7 @@ export default function FormView({ window: windowMetadata, tab, mode, initialSta
   const router = useRouter();
   const theme = useTheme();
   const [hoveredSection, setHoveredSection] = useState<string | null>(null);
-  const [expandedSections, setExpandedSections] = useState<string[]>([]);
+  const [expandedSections, setExpandedSections] = useState<string[]>(['null']);
   const [selectedTab, setSelectedTab] = useState<string>('');
   const sectionRefs = useRef<{ [key: string]: HTMLElement | null }>({});
   const containerRef = useRef<HTMLDivElement>(null);
@@ -62,14 +62,6 @@ export default function FormView({ window: windowMetadata, tab, mode, initialSta
     }));
   }, [groups, getIconForGroup, theme.palette.baselineColor.neutral]);
 
-  useEffect(() => {
-    if (tabs.length > 0) {
-      const initialExpandedSections = tabs.map(tab => tab.id);
-      setExpandedSections(initialExpandedSections);
-      setSelectedTab(tabs[0]?.id || '');
-    }
-  }, [tabs]);
-
   const handleTabChange = useCallback((newTabId: string) => {
     setSelectedTab(newTabId);
     setExpandedSections(prev => {
@@ -139,9 +131,15 @@ export default function FormView({ window: windowMetadata, tab, mode, initialSta
     [showErrorModal],
   );
 
-  const { submit, loading } = useFormAction({ window: windowMetadata, tab, mode, onSuccess, onError });
-
-  const handleSave = useMemo(() => form.handleSubmit(submit), [form, submit]);
+  const { save, loading } = useFormAction({
+    windowMetadata,
+    tab,
+    mode,
+    onSuccess,
+    onError,
+    initialState,
+    submit: form.handleSubmit,
+  });
 
   const handleHover = useCallback((sectionName: string | null) => {
     setHoveredSection(sectionName);
@@ -149,7 +147,7 @@ export default function FormView({ window: windowMetadata, tab, mode, initialSta
 
   const isSectionExpanded = useCallback(
     (sectionId: string | null) => {
-      const id = String(sectionId || '_main');
+      const id = String(sectionId);
       return expandedSections.includes(id);
     },
     [expandedSections],
@@ -161,9 +159,9 @@ export default function FormView({ window: windowMetadata, tab, mode, initialSta
         className={`w-full h-full flex flex-col transition duration-300  ${
           loading ? 'opacity-50 select-none cursor-progress cursor-to-children' : ''
         }`}
-        onSubmit={handleSave}>
+        onSubmit={save}>
         <div className="pl-2 pr-2">
-          <Toolbar windowId={windowMetadata.id} tabId={tab.id} isFormView={true} onSave={handleSave} />
+          <Toolbar windowId={windowMetadata.id} tabId={tab.id} isFormView={true} onSave={save} />
         </div>
         <div className="flex-shrink-0 pl-2 pr-2">
           <div className="mb-2">
diff --git a/packages/MainUI/components/Form/FormView/selectors/BaseSelector.tsx b/packages/MainUI/components/Form/FormView/selectors/BaseSelector.tsx
index bafe7dc2..ddff70e3 100644
--- a/packages/MainUI/components/Form/FormView/selectors/BaseSelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/BaseSelector.tsx
@@ -1,4 +1,4 @@
-import { useCallback, useEffect, useMemo, useRef } from 'react';
+import { memo, useCallback, useEffect, useMemo, useRef } from 'react';
 import { useFormContext } from 'react-hook-form';
 import { Field, FormInitializationResponse, FormMode } from '@workspaceui/etendohookbinder/src/api/types';
 import { useCallout } from '@/hooks/useCallout';
@@ -20,7 +20,7 @@ const compileExpression = (expression: string) => {
   }
 };
 
-export const BaseSelector = ({ field, formMode = FormMode.EDIT }: { field: Field; formMode?: FormMode }) => {
+const BaseSelectorComp = ({ field, formMode = FormMode.EDIT }: { field: Field; formMode?: FormMode }) => {
   const { watch, getValues, setValue, register } = useFormContext();
   const { fieldsByColumnName, tab } = useMetadataContext();
   const { recordId } = useParams<{ recordId: string }>();
@@ -144,9 +144,13 @@ export const BaseSelector = ({ field, formMode = FormMode.EDIT }: { field: Field
 
   if (isDisplayed) {
     return (
-      <div className="grid grid-cols-3 auto-rows-auto gap-4 items-center" title={field.hqlName}>
+      <div className="grid grid-cols-3 auto-rows-auto gap-4 items-center" title={field.helpComment}>
         <div className="relative">
-          {field.isMandatory && <span className="absolute -top-4 right-0 text-[#DC143C] font-bold">*</span>}
+          {field.isMandatory && (
+            <span className="absolute -top-4 right-0 text-[#DC143C] font-bold" aria-required>
+              *
+            </span>
+          )}
           <Label field={field} />
         </div>
         <div className="col-span-2">
@@ -158,3 +162,7 @@ export const BaseSelector = ({ field, formMode = FormMode.EDIT }: { field: Field
     return <input type="hidden" {...register(field.hqlName)} />;
   }
 };
+
+const BaseSelector = memo(BaseSelectorComp);
+export { BaseSelector };
+export default BaseSelector;
diff --git a/packages/MainUI/components/Form/FormView/selectors/BooleanSelector.tsx b/packages/MainUI/components/Form/FormView/selectors/BooleanSelector.tsx
index 6cbd5582..b36ed570 100644
--- a/packages/MainUI/components/Form/FormView/selectors/BooleanSelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/BooleanSelector.tsx
@@ -14,5 +14,5 @@ export const BooleanSelector = ({ field, isReadOnly }: { field: Field; isReadOnl
     [field.hqlName, setValue],
   );
 
-  return <Switch {...register(field.hqlName)} checked={value} onCheckedChange={handleChange} disabled={isReadOnly} />;
+  return <Switch {...register(field.hqlName)} field={field} checked={value} onCheckedChange={handleChange} disabled={isReadOnly} />;
 };
diff --git a/packages/MainUI/components/Form/FormView/selectors/DateSelector.tsx b/packages/MainUI/components/Form/FormView/selectors/DateSelector.tsx
index a9aa261b..8ba45e55 100644
--- a/packages/MainUI/components/Form/FormView/selectors/DateSelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/DateSelector.tsx
@@ -6,7 +6,7 @@ export const DateSelector = ({ field, isReadOnly }: { field: Field; isReadOnly?:
   const { register } = useFormContext();
   const { ref, ...rest } = register(field.hqlName);
 
-  return <DateInput {...rest} ref={ref} isReadOnly={isReadOnly} />;
+  return <DateInput {...rest} field={field} ref={ref} isReadOnly={isReadOnly} />;
 };
 
 export default DateSelector;
diff --git a/packages/MainUI/components/Form/FormView/selectors/GenericSelector.tsx b/packages/MainUI/components/Form/FormView/selectors/GenericSelector.tsx
index 496dc6d8..d720eaa9 100644
--- a/packages/MainUI/components/Form/FormView/selectors/GenericSelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/GenericSelector.tsx
@@ -8,13 +8,14 @@ import { TableDirSelector } from './TableDirSelector';
 import QuantitySelector from './QuantitySelector';
 import { ListSelector } from './ListSelector';
 import { NumericSelector } from './NumericSelector';
+import { memo } from 'react';
 
 export type GenericSelectorProps = {
   field: Field;
   isReadOnly: boolean;
 };
 
-export const GenericSelector = ({ field, isReadOnly }: GenericSelectorProps) => {
+const GenericSelectorCmp = ({ field, isReadOnly }: GenericSelectorProps) => {
   const { watch } = useFormContext();
   const value = watch(field.hqlName);
   const { reference } = field.column;
@@ -33,6 +34,7 @@ export const GenericSelector = ({ field, isReadOnly }: GenericSelectorProps) =>
     case '22':
       return (
         <QuantitySelector
+          field={field}
           name={field.hqlName}
           value={value}
           min={field.column.minValue}
@@ -47,10 +49,14 @@ export const GenericSelector = ({ field, isReadOnly }: GenericSelectorProps) =>
     case '30':
       return <SelectSelector field={field} isReadOnly={isReadOnly} />;
     case '800008':
-      return <NumericSelector field={field} readOnly={isReadOnly} required={field.isMandatory} />;
+      return <NumericSelector field={field} readOnly={isReadOnly} />;
     case '11':
     case '12':
     default:
-      return <StringSelector field={field} readOnly={isReadOnly} required={field.isMandatory} />;
+      return <StringSelector field={field} readOnly={isReadOnly} />;
   }
 };
+
+const GenericSelector = memo(GenericSelectorCmp);
+export { GenericSelector };
+export default GenericSelector;
diff --git a/packages/MainUI/components/Form/FormView/selectors/ListSelector.tsx b/packages/MainUI/components/Form/FormView/selectors/ListSelector.tsx
index f07cea20..27910a76 100644
--- a/packages/MainUI/components/Form/FormView/selectors/ListSelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/ListSelector.tsx
@@ -15,5 +15,5 @@ export const ListSelector = ({ field, isReadOnly }: { field: Field; isReadOnly:
     return [];
   }, [field.refList]);
 
-  return <Select name={field.hqlName} options={options} isReadOnly={isReadOnly} />;
+  return <Select name={field.hqlName} options={options} isReadOnly={isReadOnly} field={field} />;
 };
diff --git a/packages/MainUI/components/Form/FormView/selectors/NumericSelector.tsx b/packages/MainUI/components/Form/FormView/selectors/NumericSelector.tsx
index ea211432..811637f0 100644
--- a/packages/MainUI/components/Form/FormView/selectors/NumericSelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/NumericSelector.tsx
@@ -73,6 +73,7 @@ export const NumericSelector = ({ field, ...props }: { field: Field } & React.Co
   return (
     <TextInput
       {...props}
+      field={field}
       name={registerProps.name}
       onBlur={handleBlur}
       onChange={handleChange}
diff --git a/packages/MainUI/components/Form/FormView/selectors/QuantitySelector.tsx b/packages/MainUI/components/Form/FormView/selectors/QuantitySelector.tsx
index ccd84ded..4e7f2122 100644
--- a/packages/MainUI/components/Form/FormView/selectors/QuantitySelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/QuantitySelector.tsx
@@ -11,7 +11,7 @@ const INPUT_PROPS = {
 };
 
 const QuantitySelector: React.FC<QuantityProps> = memo(
-  ({ value: initialValue, min, max, onChange, readOnly, maxLength = 100, name }) => {
+  ({ value: initialValue, min, max, onChange, readOnly, maxLength = 100, name, field }) => {
     const [value, setValue] = useState(initialValue);
     const [error, setError] = useState(false);
     const [errorMessage, setErrorMessage] = useState('');
@@ -71,11 +71,18 @@ const QuantitySelector: React.FC<QuantityProps> = memo(
         disabled={readOnly}
         InputProps={INPUT_PROPS}
         name={name}
+        role="spinbutton"
+        aria-label={field.name}
+        aria-readonly={readOnly}
+        aria-required={field.isMandatory}
+        aria-disabled={readOnly}
+        {...(typeof minValue != 'undefined' ? { 'aria-valuemin': minValue } : {})}
+        {...(typeof maxValue != 'undefined' ? { 'aria-valuemax': maxValue } : {})}
       />
     );
   },
 );
 
-QuantitySelector.displayName = "QualitySelector";
+QuantitySelector.displayName = 'QualitySelector';
 
 export default QuantitySelector;
diff --git a/packages/MainUI/components/Form/FormView/selectors/SelectSelector.tsx b/packages/MainUI/components/Form/FormView/selectors/SelectSelector.tsx
index 4298dc54..cd1e70ef 100644
--- a/packages/MainUI/components/Form/FormView/selectors/SelectSelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/SelectSelector.tsx
@@ -1,9 +1,7 @@
 import { Field } from '@workspaceui/etendohookbinder/src/api/types';
 import Select from './components/Select';
-import { useMemo, useCallback } from 'react';
 import { useTableDirDatasource } from '@/hooks/datasource/useTableDirDatasource';
-import { SelectProps } from './components/types';
-import { useFormContext } from 'react-hook-form';
+import { useSelectFieldOptions } from '@/hooks/useSelectFieldOptions';
 
 export const SelectSelector = ({
   field,
@@ -16,56 +14,19 @@ export const SelectSelector = ({
   pageSize?: number;
   initialPageSize?: number;
 }) => {
-  const idKey = (field.selector?.valueField ?? '') as string;
-  const identifierKey = (field.selector?.displayField ?? '') as string;
-  const { watch } = useFormContext();
-  const [currentValue, currentIdentifier] = watch([field.hqlName, field.hqlName + '$_identifier']);
-
-  const { records, loading, refetch, loadMore, hasMore } = useTableDirDatasource({
-    field,
-    pageSize,
-    initialPageSize,
-  });
-
-  const options = useMemo<SelectProps['options']>(() => {
-    const result: SelectProps['options'] = [];
-
-    if (records.length === 0 && currentValue && currentIdentifier) {
-      result.push({
-        id: currentValue,
-        label: currentIdentifier,
-      });
-    }
-
-    records.forEach(record => {
-      const label = record[identifierKey] as string;
-      const id = record[idKey] as string;
-
-      if (id && label) {
-        result.push({ id, label });
-      }
-    });
-
-    return result;
-  }, [currentIdentifier, currentValue, idKey, identifierKey, records]);
-
-  const handleFocus = useCallback(() => {
-    refetch(true);
-  }, [refetch]);
-
-  const handleLoadMore = useCallback(() => {
-    loadMore();
-  }, [loadMore]);
+  const { records, loading, refetch, loadMore, hasMore } = useTableDirDatasource({ field, pageSize, initialPageSize });
+  const options = useSelectFieldOptions(field, records);
 
   return (
     <Select
       name={field.hqlName}
       options={options}
       isReadOnly={isReadOnly}
-      onFocus={handleFocus}
-      onLoadMore={handleLoadMore}
+      onFocus={refetch}
+      onLoadMore={loadMore}
       loading={loading}
       hasMore={hasMore}
+      field={field}
     />
   );
 };
diff --git a/packages/MainUI/components/Form/FormView/selectors/StringSelector.tsx b/packages/MainUI/components/Form/FormView/selectors/StringSelector.tsx
index 95a4a87b..9b2db360 100644
--- a/packages/MainUI/components/Form/FormView/selectors/StringSelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/StringSelector.tsx
@@ -2,8 +2,8 @@ import { Field } from '@workspaceui/etendohookbinder/src/api/types';
 import { TextInput } from './components/TextInput';
 import { useFormContext } from 'react-hook-form';
 
-export const StringSelector = ({ field, ...props }: { field: Field } & React.ComponentProps<typeof TextInput>) => {
+export const StringSelector = (props: { field: Field } & React.ComponentProps<typeof TextInput>) => {
   const { register } = useFormContext();
 
-  return <TextInput {...props} {...register(field.hqlName)} />;
+  return <TextInput {...props} {...register(props.field.hqlName)} />;
 };
diff --git a/packages/MainUI/components/Form/FormView/selectors/TableDirSelector.tsx b/packages/MainUI/components/Form/FormView/selectors/TableDirSelector.tsx
index 68fef9cc..66468d9b 100644
--- a/packages/MainUI/components/Form/FormView/selectors/TableDirSelector.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/TableDirSelector.tsx
@@ -1,42 +1,11 @@
 import { Field } from '@workspaceui/etendohookbinder/src/api/types';
-import Select from './components/Select';
-import { useCallback, useMemo } from 'react';
+import Select from '@/components/Form/FormView/selectors/components/Select';
 import { useTableDirDatasource } from '@/hooks/datasource/useTableDirDatasource';
-import { SelectProps } from './components/types';
-import { useFormContext } from 'react-hook-form';
+import { useSelectFieldOptions } from '@/hooks/useSelectFieldOptions';
 
 export const TableDirSelector = ({ field, isReadOnly }: { field: Field; isReadOnly: boolean }) => {
-  const idKey = (field.selector?.valueField ?? '') as string;
-  const identifierKey = (field.selector?.displayField ?? '') as string;
   const { records, refetch } = useTableDirDatasource({ field });
-  const { watch } = useFormContext();
-  const [currentValue, currentIdentifier] = watch([field.hqlName, field.hqlName + '$_identifier']);
+  const options = useSelectFieldOptions(field, records);
 
-  const options = useMemo<SelectProps['options']>(() => {
-    const result: SelectProps['options'] = [];
-
-    if (records.length === 0 && currentValue && currentIdentifier) {
-      result.push({
-        id: currentValue,
-        label: currentIdentifier,
-      });
-    }
-
-    records.forEach(record => {
-      const label = record[identifierKey] as string;
-      const id = record[idKey] as string;
-
-      if (id && label) {
-        result.push({ id, label });
-      }
-    });
-
-    return result;
-  }, [currentIdentifier, currentValue, idKey, identifierKey, records]);
-
-  const handleFocus = useCallback(() => {
-    refetch(true);
-  }, [refetch]);
-
-  return <Select name={field.hqlName} options={options} onFocus={handleFocus} isReadOnly={isReadOnly} />;
+  return <Select name={field.hqlName} options={options} onFocus={refetch} isReadOnly={isReadOnly} field={field} />;
 };
diff --git a/packages/MainUI/components/Form/FormView/selectors/components/DateInput.tsx b/packages/MainUI/components/Form/FormView/selectors/components/DateInput.tsx
index ac4b2a1b..f4ae86e7 100644
--- a/packages/MainUI/components/Form/FormView/selectors/components/DateInput.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/components/DateInput.tsx
@@ -1,15 +1,17 @@
 import { forwardRef, useCallback, useRef, useState } from 'react';
 import CalendarIcon from '../../../../../../ComponentLibrary/src/assets/icons/calendar.svg';
+import { Field } from '@workspaceui/etendohookbinder/src/api/types';
 
 interface DateInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
   label?: string;
   isReadOnly?: boolean;
   error?: boolean;
   helperText?: string;
+  field: Field;
 }
 
 export const DateInput = forwardRef<HTMLInputElement, DateInputProps>(
-  ({ name, label, isReadOnly, error, helperText, ...props }, ref) => {
+  ({ name, label, isReadOnly, error, helperText, field, ...props }, ref) => {
     const inputRef = useRef<HTMLInputElement>();
     const [isFocused, setIsFocused] = useState(false);
 
@@ -34,16 +36,22 @@ export const DateInput = forwardRef<HTMLInputElement, DateInputProps>(
       [ref],
     );
 
-    const handleFocus = () => setIsFocused(true);
+    const handleFocus = useCallback(() => setIsFocused(true), []);
 
-    const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
-      setIsFocused(false);
-      props.onBlur?.(e);
-    };
+    const handleBlur = useCallback(
+      (e: React.FocusEvent<HTMLInputElement>) => {
+        setIsFocused(false);
+        props.onBlur?.(e);
+      },
+      [props],
+    );
 
-    const getLabelClass = () => `block mb-1 text-sm ${isReadOnly ? 'text-baseline-60' : 'text-baseline-80'}`;
+    const getLabelClass = useCallback(
+      () => `block mb-1 text-sm ${isReadOnly ? 'text-baseline-60' : 'text-baseline-80'}`,
+      [isReadOnly],
+    );
 
-    const getInputClass = () => {
+    const getInputClass = useCallback(() => {
       const baseClass = 'w-full h-full py-2 pl-2 pr-8 border-b outline-none text-sm';
       const focusClass = isFocused ? 'border-baseline-80 bg-baseline-0' : 'border-baseline-60';
       const readOnlyClass = isReadOnly
@@ -52,9 +60,9 @@ export const DateInput = forwardRef<HTMLInputElement, DateInputProps>(
       const errorClass = error ? 'border-error-main' : '';
 
       return `${baseClass} ${focusClass} ${readOnlyClass} ${errorClass} transition-colors`;
-    };
+    }, [error, isFocused, isReadOnly]);
 
-    const renderLabel = () => {
+    const renderLabel = useCallback(() => {
       if (!label) return null;
 
       return (
@@ -63,13 +71,13 @@ export const DateInput = forwardRef<HTMLInputElement, DateInputProps>(
           {props.required && <span className="text-error-main ml-1">*</span>}
         </label>
       );
-    };
+    }, [getLabelClass, label, name, props.required]);
 
-    const renderHelperText = () => {
+    const renderHelperText = useCallback(() => {
       if (!helperText) return null;
 
       return <div className={`mt-1 text-xs ${error ? 'text-error-main' : 'text-baseline-60'}`}>{helperText}</div>;
-    };
+    }, [error, helperText]);
 
     return (
       <div className="w-full font-medium">
@@ -86,6 +94,12 @@ export const DateInput = forwardRef<HTMLInputElement, DateInputProps>(
             onBlur={handleBlur}
             className={getInputClass()}
             readOnly={isReadOnly}
+            role="textbox"
+            aria-label={field.name}
+            aria-readonly={isReadOnly}
+            aria-required={field.isMandatory}
+            aria-disabled={isReadOnly}
+            aria-details={field.helpComment}
             {...props}
           />
           <div className="absolute right-0 top-0 h-full flex items-center pr-1 pointer-events-none">
diff --git a/packages/MainUI/components/Form/FormView/selectors/components/Select.tsx b/packages/MainUI/components/Form/FormView/selectors/components/Select.tsx
index 3201e39d..09f66f92 100644
--- a/packages/MainUI/components/Form/FormView/selectors/components/Select.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/components/Select.tsx
@@ -1,4 +1,4 @@
-import { useState, useEffect, useRef, useCallback, useMemo } from 'react';
+import { useState, useEffect, useRef, useCallback, useMemo, memo } from 'react';
 import { useFormContext } from 'react-hook-form';
 import { SelectProps } from './types';
 import checkIconUrl from '../../../../../../ComponentLibrary/src/assets/icons/check-circle-filled.svg?url';
@@ -6,15 +6,7 @@ import closeIconUrl from '../../../../../../ComponentLibrary/src/assets/icons/x.
 import ChevronDown from '../../../../../../ComponentLibrary/src/assets/icons/chevron-down.svg';
 import Image from 'next/image';
 
-export default function Select({
-  name,
-  options,
-  onFocus,
-  isReadOnly,
-  onLoadMore,
-  loading = false,
-  hasMore = true,
-}: SelectProps) {
+function SelectCmp({ name, options, onFocus, isReadOnly, onLoadMore, loading = false, hasMore = true, field }: SelectProps) {
   const { register, setValue, watch } = useFormContext();
   const selectedValue = watch(name);
   const [selectedLabel, setSelectedLabel] = useState('');
@@ -26,7 +18,6 @@ export default function Select({
   const searchInputRef = useRef<HTMLInputElement>(null);
   const wrapperRef = useRef<HTMLDivElement>(null);
   const loadingRef = useRef<HTMLLIElement>(null);
-  const hasLoadedRef = useRef<boolean>(false);
 
   const filteredOptions = useMemo(
     () => options.filter(option => option.label.toLowerCase().includes(searchTerm.toLowerCase())),
@@ -43,36 +34,39 @@ export default function Select({
     [name, setValue],
   );
 
-  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
-    if (e.key === 'ArrowDown') {
-      e.preventDefault();
-      setHighlightedIndex(prev => (prev + 1) % filteredOptions.length);
-    }
+  const handleKeyDown = useCallback(
+    (e: React.KeyboardEvent<HTMLInputElement>) => {
+      if (e.key === 'ArrowDown') {
+        e.preventDefault();
+        setHighlightedIndex(prev => (prev + 1) % filteredOptions.length);
+      }
 
-    if (e.key === 'ArrowUp') {
-      e.preventDefault();
-      setHighlightedIndex(prev => (prev <= 0 ? filteredOptions.length - 1 : prev - 1));
-    }
+      if (e.key === 'ArrowUp') {
+        e.preventDefault();
+        setHighlightedIndex(prev => (prev <= 0 ? filteredOptions.length - 1 : prev - 1));
+      }
 
-    if (e.key === 'Enter' && highlightedIndex >= 0) {
-      e.preventDefault();
-      const option = filteredOptions[highlightedIndex];
-      if (option) handleSelect(option.id, option.label);
-    }
+      if (e.key === 'Enter' && highlightedIndex >= 0) {
+        e.preventDefault();
+        const option = filteredOptions[highlightedIndex];
+        if (option) handleSelect(option.id, option.label);
+      }
 
-    if (e.key === 'Escape') {
-      e.preventDefault();
-      setIsOpen(false);
-      setHighlightedIndex(-1);
-    }
-  };
+      if (e.key === 'Escape') {
+        e.preventDefault();
+        setIsOpen(false);
+        setHighlightedIndex(-1);
+      }
+    },
+    [filteredOptions, highlightedIndex, handleSelect],
+  );
 
-  const handleBlur = (e: React.FocusEvent<HTMLDivElement>) => {
+  const handleBlur = useCallback((e: React.FocusEvent<HTMLDivElement>) => {
     if (!e.currentTarget.contains(e.relatedTarget as Node)) {
       setIsOpen(false);
       setHighlightedIndex(-1);
     }
-  };
+  }, []);
 
   const handleClickOutside = useCallback((event: MouseEvent) => {
     if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {
@@ -114,6 +108,25 @@ export default function Select({
     }
   }, [loading, hasMore, onLoadMore]);
 
+  const handleFocus = useCallback(() => {
+    onFocus?.();
+  }, [onFocus]);
+
+  const handleSetSearchTerm = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearchTerm(e.target.value);
+  }, []);
+
+  const handleOptionClick = useCallback(
+    (id: string, label: string) => {
+      handleSelect(id, label);
+    },
+    [handleSelect],
+  );
+
+  const handleOptionMouseEnter = useCallback((index: number) => {
+    setHighlightedIndex(index);
+  }, []);
+
   useEffect(() => {
     const selectedOption = options.find(option => option.id === selectedValue);
     if (!selectedOption && selectedValue) {
@@ -128,13 +141,8 @@ export default function Select({
       setSearchTerm('');
       setHighlightedIndex(0);
       setTimeout(() => searchInputRef.current?.focus(), 1);
-
-      if (!hasLoadedRef.current) {
-        onFocus?.(selectedValue);
-        hasLoadedRef.current = true;
-      }
     }
-  }, [isOpen, onFocus, selectedValue]);
+  }, [isOpen]);
 
   useEffect(() => {
     document.addEventListener('mousedown', handleClickOutside);
@@ -143,11 +151,48 @@ export default function Select({
     };
   }, [handleClickOutside]);
 
+  const RenderOptions = useCallback(() => {
+    if (filteredOptions.length > 0) {
+      return filteredOptions.map(({ id, label }, index) => (
+        <li
+          key={id}
+          role="option"
+          aria-selected={selectedValue === id}
+          onClick={() => handleOptionClick(id, label)}
+          onMouseEnter={() => handleOptionMouseEnter(index)}
+          className={`px-4 py-3 text-sm cursor-pointer flex items-center justify-between
+            ${highlightedIndex === index ? 'bg-baseline-10' : ''}
+            ${selectedValue === id ? 'bg-baseline-10 font-medium' : ''}
+            hover:bg-baseline-10`}>
+          <span className={`truncate mr-2 ${selectedValue === id ? 'text-dynamic-dark' : 'text-baseline-90'}`}>
+            {label}
+          </span>
+          {selectedValue === id && (
+            <Image
+              src={checkIconUrl}
+              alt="Selected Item"
+              className="fade-in-left flex-shrink-0"
+              height={16}
+              width={16}
+            />
+          )}
+        </li>
+      ));
+    }
+    return <li className="px-4 py-3 text-sm text-baseline-60">No options found</li>;
+  }, [filteredOptions, highlightedIndex, selectedValue, handleOptionClick, handleOptionMouseEnter]);
+
   return (
     <div
       ref={wrapperRef}
       className={`relative w-full font-['Inter'] ${isReadOnly ? 'pointer-events-none' : ''}`}
       onBlur={isReadOnly ? undefined : handleBlur}
+      role="textbox"
+      aria-label={field.name}
+      aria-readonly={isReadOnly}
+      aria-required={field.isMandatory}
+      aria-disabled={isReadOnly}
+      aria-details={field.helpComment}
       tabIndex={-1}>
       <input {...register(name)} type="hidden" readOnly={isReadOnly} />
       <div
@@ -186,44 +231,16 @@ export default function Select({
             <input
               ref={searchInputRef}
               value={searchTerm}
-              onChange={e => setSearchTerm(e.target.value)}
+              onChange={handleSetSearchTerm}
               onKeyDown={handleKeyDown}
               placeholder="Search..."
               className="w-full p-2 text-sm border border-baseline-30 rounded focus:outline-none focus:border-dynamic-main focus:ring-1 focus:ring-dynamic-light"
               aria-label="Search options"
+              onFocus={handleFocus}
             />
           </div>
           <ul ref={listRef} role="listbox" className="max-h-60 overflow-y-auto" onScroll={handleScroll}>
-            {filteredOptions.length > 0 ? (
-              filteredOptions.map(({ id, label }, index) => (
-                <li
-                  key={id}
-                  role="option"
-                  aria-selected={selectedValue === id}
-                  onClick={() => handleSelect(id, label)}
-                  onMouseEnter={() => setHighlightedIndex(index)}
-                  className={`px-4 py-3 text-sm cursor-pointer flex items-center justify-between
-                    ${highlightedIndex === index ? 'bg-baseline-10' : ''}
-                    ${selectedValue === id ? 'bg-baseline-10 font-medium' : ''}
-                    hover:bg-baseline-10`}>
-                  <span className={`truncate mr-2 ${selectedValue === id ? 'text-dynamic-dark' : 'text-baseline-90'}`}>
-                    {label}
-                  </span>
-                  {selectedValue === id && (
-                    <Image
-                      src={checkIconUrl}
-                      alt="Selected Item"
-                      className="fade-in-left flex-shrink-0"
-                      height={16}
-                      width={16}
-                    />
-                  )}
-                </li>
-              ))
-            ) : (
-              <li className="px-4 py-3 text-sm text-baseline-60">No options found</li>
-            )}
-
+            <RenderOptions />
             {loading && hasMore && (
               <li ref={loadingRef} className="px-4 py-3 text-sm text-baseline-60 text-center">
                 Loading more options...
@@ -236,4 +253,6 @@ export default function Select({
   );
 }
 
+const Select = memo(SelectCmp);
+export default Select;
 export { Select };
diff --git a/packages/MainUI/components/Form/FormView/selectors/components/Switch.tsx b/packages/MainUI/components/Form/FormView/selectors/components/Switch.tsx
index 07b3d626..ab8c7d80 100644
--- a/packages/MainUI/components/Form/FormView/selectors/components/Switch.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/components/Switch.tsx
@@ -1,13 +1,15 @@
+import { Field } from '@workspaceui/etendohookbinder/src/api/types';
 import { forwardRef, useCallback } from 'react';
 
 interface SwitchProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
   checked: boolean;
   onCheckedChange: (checked: boolean) => void;
   disabled?: boolean;
+  field: Field;
 }
 
 export const Switch = forwardRef<HTMLButtonElement, SwitchProps>(
-  ({ checked = false, onCheckedChange, disabled = false, className = '', ...props }, ref) => {
+  ({ checked = false, onCheckedChange, disabled = false, className = '', field, ...props }, ref) => {
     const handleToggle = useCallback(() => {
       if (disabled) return;
       onCheckedChange(!checked);
@@ -18,6 +20,11 @@ export const Switch = forwardRef<HTMLButtonElement, SwitchProps>(
         type="button"
         role="switch"
         aria-checked={checked}
+        aria-label={field.name}
+        aria-readonly={disabled}
+        aria-required={field.isMandatory}
+        aria-disabled={disabled}
+        aria-details={field.helpComment}
         disabled={disabled}
         onClick={handleToggle}
         ref={ref}
diff --git a/packages/MainUI/components/Form/FormView/selectors/components/TextInput.tsx b/packages/MainUI/components/Form/FormView/selectors/components/TextInput.tsx
index 17edf53b..56498ebe 100644
--- a/packages/MainUI/components/Form/FormView/selectors/components/TextInput.tsx
+++ b/packages/MainUI/components/Form/FormView/selectors/components/TextInput.tsx
@@ -11,6 +11,7 @@ export const TextInput = ({
   disabled,
   className,
   onChange,
+  field,
   ...props
 }: TextInputProps) => {
   const isDisabled = disabled || readOnly;
@@ -25,16 +26,24 @@ export const TextInput = ({
   };
 
   return (
-    <div className="w-full font-['Inter'] font-medium">
+    <div
+      className="w-full font-['Inter'] font-medium"
+      role="textbox"
+      aria-placeholder={field.name}
+      aria-label={field.name}
+      aria-readonly={readOnly}
+      aria-required={field.isMandatory}>
       {label && (
         <label
           htmlFor={props.id || props.name}
           className={`block mb-1 text-sm ${isDisabled ? 'text-baseline-60' : 'text-baseline-80'}`}>
           {label}
-          {props.required && <span className="text-error-main ml-1">*</span>}
+          {field.isMandatory && <span className="text-error-main ml-1">*</span>}
         </label>
       )}
-      <div className={`relative flex items-center w-full h-10 ${isDisabled ? 'pointer-events-none' : ''}`}>
+      <div
+        className={`relative flex items-center w-full h-10 ${isDisabled ? 'pointer-events-none' : ''}`}
+        aria-description={field.helpComment}>
         {leftIcon && (
           <div className="absolute left-3 text-baseline-60">
             <button type="button" onClick={onLeftIconClick} className="p-1 focus:outline-none" disabled={isDisabled}>
diff --git a/packages/MainUI/components/Form/FormView/selectors/components/types.ts b/packages/MainUI/components/Form/FormView/selectors/components/types.ts
index e4612038..ba8a2a66 100644
--- a/packages/MainUI/components/Form/FormView/selectors/components/types.ts
+++ b/packages/MainUI/components/Form/FormView/selectors/components/types.ts
@@ -1,3 +1,5 @@
+import { Field } from "@workspaceui/etendohookbinder/src/api/types";
+
 export interface TextInputProps extends React.HTMLProps<HTMLInputElement> {
   leftIcon?: React.ReactNode;
   rightIcon?: React.ReactNode;
@@ -5,6 +7,7 @@ export interface TextInputProps extends React.HTMLProps<HTMLInputElement> {
   onRightIconClick?: () => void;
   label?: string;
   setValue?: (value: string) => void;
+  field: Field;
 }
 
 export interface Option {
@@ -15,9 +18,10 @@ export interface Option {
 export interface SelectProps {
   name: string;
   options: Array<{ id: string; label: string }>;
-  onFocus?: (currentValue: string) => void;
+  onFocus?: () => void;
   isReadOnly?: boolean;
   loading?: boolean;
   hasMore?: boolean;
   onLoadMore?: () => void;
+  field: Field;
 }
diff --git a/packages/MainUI/components/Form/FormView/types.ts b/packages/MainUI/components/Form/FormView/types.ts
index 5f69a070..c7b327e4 100644
--- a/packages/MainUI/components/Form/FormView/types.ts
+++ b/packages/MainUI/components/Form/FormView/types.ts
@@ -154,6 +154,7 @@ export interface QuantityProps {
   onChange?: (value: number) => void;
   name: string;
   readOnly?: boolean;
+  field: Field;
 }
 
 export interface ListSelectorProps {
diff --git a/packages/MainUI/components/ProcessModal/index.tsx b/packages/MainUI/components/ProcessModal/index.tsx
index c3703a44..293d9ae1 100644
--- a/packages/MainUI/components/ProcessModal/index.tsx
+++ b/packages/MainUI/components/ProcessModal/index.tsx
@@ -17,6 +17,8 @@ const ProcessModal: React.FC<ProcessModalProps> = ({
   const { styles } = useStyle();
   const responseMessage = processResponse?.responseActions?.[0]?.showMsgInProcessView;
   const isError = responseMessage?.msgType === 'error';
+  const type = ProcessButtonType.PROCESS_DEFINITION in button ? ProcessButtonType.PROCESS_DEFINITION : ProcessButtonType.PROCESS_ACTION;
+
   useEffect(() => {
     if (open) {
       console.debug('ProcessModal opened');
@@ -34,7 +36,7 @@ const ProcessModal: React.FC<ProcessModalProps> = ({
 
   return (
     <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth sx={styles.dialog}>
-      <DialogTitle sx={styles.dialogTitle}>{button.name}</DialogTitle>
+      <DialogTitle sx={styles.dialogTitle}>{button.name} ({type})</DialogTitle>
       <DialogContent sx={styles.dialogContent}>
         <Typography sx={styles.message}>{confirmationMessage}</Typography>
 
diff --git a/packages/MainUI/components/Toolbar/ProcessMenu.tsx b/packages/MainUI/components/Toolbar/ProcessMenu.tsx
index 99577bc2..1e89e25d 100644
--- a/packages/MainUI/components/Toolbar/ProcessMenu.tsx
+++ b/packages/MainUI/components/Toolbar/ProcessMenu.tsx
@@ -2,7 +2,7 @@ import { Menu, MenuItem, Tooltip } from '@mui/material';
 import { theme } from '@workspaceui/componentlibrary/src/theme';
 import { ProcessMenuProps } from './types';
 import { ProcessButton } from '../ProcessModal/types';
-import { useCallback } from 'react';
+import { forwardRef, useCallback } from 'react';
 
 const menuStyle = {
   marginTop: '0.5rem',
@@ -31,19 +31,23 @@ interface ProcessMenuItemProps {
   disabled: boolean;
 }
 
-const ProcessMenuItem: React.FC<ProcessMenuItemProps> = ({ button, onProcessClick, disabled }) => {
-  const handleClick = useCallback(() => {
-    onProcessClick(button);
-  }, [button, onProcessClick]);
+const ProcessMenuItem = forwardRef<HTMLLIElement, ProcessMenuItemProps>(
+  ({ button, onProcessClick, disabled }: ProcessMenuItemProps, ref) => {
+    const handleClick = useCallback(() => {
+      onProcessClick(button);
+    }, [button, onProcessClick]);
 
-  return (
-    <MenuItem onClick={handleClick} sx={menuItemStyle} disabled={disabled}>
+    return (
       <Tooltip title={button.name} enterDelay={600} leaveDelay={100}>
-        <span>{button.name}</span>
+        <MenuItem onClick={handleClick} sx={menuItemStyle} disabled={disabled} ref={ref}>
+          <span>{button.name}</span>
+        </MenuItem>
       </Tooltip>
-    </MenuItem>
-  );
-};
+    );
+  },
+);
+
+ProcessMenuItem.displayName = 'ProcessMenuItem';
 
 const ProcessMenu: React.FC<ProcessMenuProps> = ({
   anchorEl,
diff --git a/packages/MainUI/components/Toolbar/Toolbar.tsx b/packages/MainUI/components/Toolbar/Toolbar.tsx
index b4e4796d..405ee5ef 100644
--- a/packages/MainUI/components/Toolbar/Toolbar.tsx
+++ b/packages/MainUI/components/Toolbar/Toolbar.tsx
@@ -1,4 +1,4 @@
-import { useCallback, useMemo, useState, createElement, useEffect } from 'react';
+import { useCallback, useMemo, useState, createElement, useEffect, memo } from 'react';
 import { Box } from '@mui/material';
 import TopToolbar from '@workspaceui/componentlibrary/src/components/Table/Toolbar';
 import {
@@ -34,7 +34,7 @@ import { ProcessButton } from '../ProcessModal/types';
 import ProcessModal from '../ProcessModal';
 import { useProcessMetadata } from '@/hooks/useProcessMetadata';
 
-export const Toolbar: React.FC<ToolbarProps> = ({ windowId, tabId, isFormView = false, onSave }) => {
+const ToolbarCmp: React.FC<ToolbarProps> = ({ windowId, tabId, isFormView = false, onSave }) => {
   const [openModal, setOpenModal] = useState(false);
   const [isExecuting, setIsExecuting] = useState(false);
   const [processResponse, setProcessResponse] = useState<ProcessResponse | null>(null);
@@ -83,7 +83,6 @@ export const Toolbar: React.FC<ToolbarProps> = ({ windowId, tabId, isFormView =
   const processButtons = useMemo(() => toolbar?.buttons.filter(isProcessButton) || [], [toolbar?.buttons]);
 
   const handleMenuOpen = useCallback((event: React.MouseEvent<HTMLElement>) => {
-    console.debug(event.currentTarget);
     setAnchorEl(event.currentTarget);
   }, []);
 
@@ -152,7 +151,7 @@ export const Toolbar: React.FC<ToolbarProps> = ({ windowId, tabId, isFormView =
     }
   }, [metadata]);
 
-  const createToolbarConfig = () => {
+  const createToolbarConfig = useCallback(() => {
     const buttons = toolbar?.buttons ?? [];
 
     const createProcessMenuButton = (): StandardButtonConfig => ({
@@ -223,7 +222,7 @@ export const Toolbar: React.FC<ToolbarProps> = ({ windowId, tabId, isFormView =
     }
 
     return config;
-  };
+  }, [handleAction, handleMenuOpen, isFormView, processButtons.length, selectedRecord, t, toolbar?.buttons]);
 
   if (loading) {
     return (
@@ -324,3 +323,6 @@ const getSectionStyle = (sectionType: string[]) => {
     background: theme.palette.baselineColor.transparentNeutral[5],
   };
 };
+
+export const Toolbar = memo(ToolbarCmp);
+export default Toolbar;
diff --git a/packages/MainUI/components/loading.tsx b/packages/MainUI/components/loading.tsx
new file mode 100644
index 00000000..2b55a0da
--- /dev/null
+++ b/packages/MainUI/components/loading.tsx
@@ -0,0 +1,14 @@
+import { CircularProgress } from '@mui/material';
+import { DEFAULT_LANGUAGE, Language } from '@workspaceui/componentlibrary/src/locales';
+import { t } from '@/utils/language';
+
+export default function Loading({ language }: { language?: Language }) {
+  return (
+    <div className="h-full mx-auto flex flex-col items-center justify-center">
+      <CircularProgress />
+      <span>{t(language ?? DEFAULT_LANGUAGE, 'common.loading')}</span>
+    </div>
+  );
+}
+
+export { Loading };
diff --git a/packages/MainUI/contexts/api/index.tsx b/packages/MainUI/contexts/api/index.tsx
index 6178fd0e..aa8f542b 100644
--- a/packages/MainUI/contexts/api/index.tsx
+++ b/packages/MainUI/contexts/api/index.tsx
@@ -1,64 +1,56 @@
 'use client';
 
-import { createContext, useCallback, useEffect, useReducer, useRef, useState } from 'react';
+import { createContext, useCallback, useEffect, useReducer, useRef } from 'react';
 import { ErrorDisplay } from '@/components/ErrorDisplay';
 import { useTranslation } from '@/hooks/useTranslation';
 import { HEALTH_CHECK_MAX_ATTEMPTS, HEALTH_CHECK_RETRY_DELAY_MS } from '@/constants/config';
 import { initialState, stateReducer } from './state';
 import { performHealthCheck } from '../../utils/health-check';
-import LoadingScreen from '@/screens/Loading';
-import { getApiUrl } from '@/app/actions';
-import { logger } from '@/utils/logger';
-import { FALLBACK_URL } from '@/utils/constants';
 import { Metadata } from '@workspaceui/etendohookbinder/src/api/metadata';
 import { datasource } from '@workspaceui/etendohookbinder/src/api/datasource';
+import Loading from '@/components/loading';
+import { useLanguage } from '@/hooks/useLanguage';
 
 export const ApiContext = createContext<string | null>(null);
 
-export default function ApiProvider({ children }: React.PropsWithChildren) {
+export default function ApiProvider({ children, url }: React.PropsWithChildren<{ url: string }>) {
+  const { language } = useLanguage();
   const [state, dispatch] = useReducer(stateReducer, initialState);
-  const controllerRef = useRef(new AbortController());
+  const controllerRef = useRef<AbortController>(new AbortController());
   const { t } = useTranslation();
-  const [url, setUrl] = useState<string | null>(null);
 
   const healthCheck = useCallback(() => {
-    if (url) {
+    const signal = controllerRef.current.signal;
+
+    if (url && !signal.aborted) {
       dispatch({ type: 'RESET' });
       performHealthCheck(
         url,
-        controllerRef.current.signal,
+        signal,
         HEALTH_CHECK_MAX_ATTEMPTS,
         HEALTH_CHECK_RETRY_DELAY_MS,
-        () => dispatch({ type: 'SET_CONNECTED' }),
-        () => dispatch({ type: 'SET_ERROR' }),
+        () => {
+          if (signal.aborted) return;
+          dispatch({ type: 'SET_CONNECTED' });
+        },
+        () => {
+          if (signal.aborted) return;
+          dispatch({ type: 'SET_ERROR' });
+        },
       );
     }
   }, [url]);
 
   useEffect(() => {
-    const controller = new AbortController();
-    controllerRef.current = controller;
-
+    const controller = controllerRef.current;
     healthCheck();
 
     return () => {
       controller.abort();
+      controllerRef.current = new AbortController();
     };
   }, [healthCheck]);
 
-  useEffect(() => {
-    getApiUrl()
-      .then(url => {
-        logger.info('Fetched API URL', url);
-        setUrl(url);
-      })
-      .catch(err => {
-        logger.error('Error getting API URL', err);
-        logger.error('Falling back to default URL', FALLBACK_URL);
-        setUrl(FALLBACK_URL);
-      });
-  }, []);
-
   useEffect(() => {
     if (url) {
       Metadata.setBaseUrl(url);
@@ -83,5 +75,5 @@ export default function ApiProvider({ children }: React.PropsWithChildren) {
     );
   }
 
-  return <LoadingScreen />;
+  return <Loading language={language} />;
 }
diff --git a/packages/MainUI/contexts/api/mainui.code-workspace b/packages/MainUI/contexts/api/mainui.code-workspace
deleted file mode 100644
index 3ed1dc6a..00000000
--- a/packages/MainUI/contexts/api/mainui.code-workspace
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-	"folders": [
-		{
-			"path": "../../../.."
-		},
-		{
-			"path": "../../../../../mainui2"
-		}
-	],
-	"settings": {}
-}
\ No newline at end of file
diff --git a/packages/MainUI/contexts/api/wrapper.tsx b/packages/MainUI/contexts/api/wrapper.tsx
new file mode 100644
index 00000000..6ff0474f
--- /dev/null
+++ b/packages/MainUI/contexts/api/wrapper.tsx
@@ -0,0 +1,6 @@
+import { getApiUrl } from '@/app/actions';
+import ApiProvider from '.';
+
+export default async function ApiProviderWrapper({ children }: React.PropsWithChildren) {
+  return <ApiProvider url={await getApiUrl()}>{children}</ApiProvider>;
+}
diff --git a/packages/MainUI/contexts/languageProvider.tsx b/packages/MainUI/contexts/languageProvider.tsx
index 4824a7db..72fcc347 100644
--- a/packages/MainUI/contexts/languageProvider.tsx
+++ b/packages/MainUI/contexts/languageProvider.tsx
@@ -5,8 +5,7 @@ import LanguageContext from './languageContext';
 import { Language } from './types';
 import { Metadata } from '@workspaceui/etendohookbinder/src/api/metadata';
 import { getLanguageFlag } from '../utils/languageFlags';
-
-export const DEFAULT_LANGUAGE: Language = 'en_US';
+import { DEFAULT_LANGUAGE } from '@workspaceui/componentlibrary/src/locales';
 
 export default function LanguageProvider({ children }: React.PropsWithChildren) {
   const [language, setLanguageValue] = useState<Language>(() => {
@@ -41,9 +40,5 @@ export default function LanguageProvider({ children }: React.PropsWithChildren)
     [language, setLanguage, getFlag],
   );
 
-  if (!language) {
-    return null;
-  }
-
   return <LanguageContext.Provider value={value}>{children}</LanguageContext.Provider>;
 }
diff --git a/packages/MainUI/contexts/user.tsx b/packages/MainUI/contexts/user.tsx
index 97c50185..26150c9f 100644
--- a/packages/MainUI/contexts/user.tsx
+++ b/packages/MainUI/contexts/user.tsx
@@ -1,6 +1,6 @@
 'use client';
 
-import { createContext, useCallback, useEffect, useLayoutEffect, useMemo, useState } from 'react';
+import { createContext, useCallback, useEffect, useMemo, useState } from 'react';
 import { logger } from '../utils/logger';
 import { Metadata } from '@workspaceui/etendohookbinder/src/api/metadata';
 import { datasource } from '@workspaceui/etendohookbinder/src/api/datasource';
@@ -20,9 +20,8 @@ import {
 } from '@workspaceui/etendohookbinder/src/api/types';
 import { setDefaultConfiguration as apiSetDefaultConfiguration } from '@workspaceui/etendohookbinder/src/api/defaultConfig';
 import { usePathname, useRouter } from 'next/navigation';
-import Spinner from '@workspaceui/componentlibrary/src/components/Spinner';
 import { useLanguage } from '../hooks/useLanguage';
-import { DEFAULT_LANGUAGE } from './languageProvider';
+import { DEFAULT_LANGUAGE } from '@workspaceui/componentlibrary/src/locales';
 
 export const UserContext = createContext({} as IUserContext);
 
@@ -265,7 +264,7 @@ export default function UserProvider(props: React.PropsWithChildren) {
     }
   }, [clearUserData, navigate, token, updateSessionInfo]);
 
-  useLayoutEffect(() => {
+  useEffect(() => {
     if (token || pathname === '/login') {
       setReady(true);
     }
@@ -309,5 +308,9 @@ export default function UserProvider(props: React.PropsWithChildren) {
     setLanguage((matchedLanguage?.language as Language) || DEFAULT_LANGUAGE);
   }, [languages, setLanguage]);
 
-  return <UserContext.Provider value={value}>{ready ? props.children : <Spinner />}</UserContext.Provider>;
+  if (!ready) {
+    return null;
+  }
+
+  return <UserContext.Provider value={value}>{props.children}</UserContext.Provider>;
 }
diff --git a/packages/MainUI/hooks/Toolbar/useProcessButton.ts b/packages/MainUI/hooks/Toolbar/useProcessButton.ts
index dc009003..04603d58 100644
--- a/packages/MainUI/hooks/Toolbar/useProcessButton.ts
+++ b/packages/MainUI/hooks/Toolbar/useProcessButton.ts
@@ -3,6 +3,7 @@ import { ProcessResponse } from '../../components/Toolbar/types';
 import { ExecuteProcessParams } from './types';
 import { BaseFieldDefinition } from '@workspaceui/etendohookbinder/src/api/types';
 import { FieldType } from '@workspaceui/etendohookbinder/src/api/types';
+import { logger } from '@/utils/logger';
 
 export const useProcessButton = (
   executeProcess: (params: ExecuteProcessParams) => Promise<ProcessResponse>,
@@ -43,6 +44,8 @@ export const useProcessButton = (
 
       return result;
     } catch (error) {
+      logger.error('Error executing process', error);
+
       return {
         responseActions: [
           {
diff --git a/packages/MainUI/hooks/Toolbar/useProcessExecution.ts b/packages/MainUI/hooks/Toolbar/useProcessExecution.ts
index 00d3aa4a..2434d41e 100644
--- a/packages/MainUI/hooks/Toolbar/useProcessExecution.ts
+++ b/packages/MainUI/hooks/Toolbar/useProcessExecution.ts
@@ -4,6 +4,7 @@ import { ProcessResponse } from '../../components/Toolbar/types';
 import { ExecuteProcessActionParams, ExecuteProcessDefinitionParams, ExecuteProcessParams } from './types';
 import { Metadata } from '@workspaceui/etendohookbinder/src/api/metadata';
 import { ProcessButtonType } from '@/components/ProcessModal/types';
+import { logger } from '@/utils/logger';
 
 export function useProcessExecution() {
   const [loading, setLoading] = useState(false);
@@ -13,6 +14,7 @@ export function useProcessExecution() {
   const executeProcessDefinition = useCallback(
     async ({ button, recordId, params = {} }: ExecuteProcessDefinitionParams): Promise<ProcessResponse> => {
       try {
+        alert('execute process definition');
         setLoading(true);
         setError(null);
         const queryParams = new URLSearchParams({
@@ -117,11 +119,11 @@ export function useProcessExecution() {
       }
 
       if (ProcessButtonType.PROCESS_ACTION in button) {
-        console.debug('process action', button);
+        logger.error('process action', button);
 
         return executeProcessAction({ button, recordId, params });
       } else if (ProcessButtonType.PROCESS_DEFINITION in button) {
-        console.debug('process definition', button);
+        logger.error('process definition', button);
 
         return executeProcessDefinition({ button, recordId, params });
       } else {
diff --git a/packages/MainUI/hooks/datasource/useTableDirDatasource.ts b/packages/MainUI/hooks/datasource/useTableDirDatasource.ts
index 335259d1..bc70f240 100644
--- a/packages/MainUI/hooks/datasource/useTableDirDatasource.ts
+++ b/packages/MainUI/hooks/datasource/useTableDirDatasource.ts
@@ -37,7 +37,6 @@ export const useTableDirDatasource = ({ field, pageSize = 20, initialPageSize =
         if (reset) {
           setCurrentPage(0);
           setHasMore(true);
-          setRecords([]);
         }
 
         const startRow = reset ? 0 : currentPage * pageSize;
@@ -97,6 +96,10 @@ export const useTableDirDatasource = ({ field, pageSize = 20, initialPageSize =
           throw new Error(statusText);
         }
       } catch (err) {
+        if (reset) {
+          setRecords([]);
+        }
+
         setError(err instanceof Error ? err : new Error(String(err)));
       } finally {
         setLoading(false);
@@ -111,7 +114,12 @@ export const useTableDirDatasource = ({ field, pageSize = 20, initialPageSize =
     }
   }, [fetch, loading, hasMore, value]);
 
-  const refetch = useCallback((reset = true) => fetch(value, reset), [fetch, value]);
+  const refetch = useCallback(
+    (reset = true) => {
+      fetch(value, reset);
+    },
+    [fetch, value],
+  );
 
   return {
     records,
diff --git a/packages/MainUI/hooks/useFormAction.ts b/packages/MainUI/hooks/useFormAction.ts
index d0e15643..1b4854df 100644
--- a/packages/MainUI/hooks/useFormAction.ts
+++ b/packages/MainUI/hooks/useFormAction.ts
@@ -1,45 +1,43 @@
-import { useCallback, useEffect, useRef, useState } from 'react';
+import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
 import { EntityData, FormMode, Tab, WindowMetadata } from '@workspaceui/etendohookbinder/src/api/types';
 import { Metadata } from '@workspaceui/etendohookbinder/src/api/metadata';
 import { useUserContext } from './useUserContext';
+import { UseFormHandleSubmit } from 'react-hook-form';
+import { buildFormPayload, buildQueryString } from '@/utils';
 
 export interface UseFormActionParams {
-  window: WindowMetadata;
+  windowMetadata: WindowMetadata;
   tab: Tab;
   mode: FormMode;
   onSuccess: (data: EntityData) => void;
   onError: (data: string) => void;
+  initialState: EntityData;
+  submit: UseFormHandleSubmit<EntityData, undefined>;
 }
 
-export const useFormAction = ({ window, tab, mode, onSuccess, onError }: UseFormActionParams) => {
+export const useFormAction = ({
+  windowMetadata,
+  tab,
+  mode,
+  onSuccess,
+  onError,
+  initialState,
+  submit,
+}: UseFormActionParams) => {
   const [loading, setLoading] = useState(false);
   const controller = useRef<AbortController>(new AbortController());
   const { user } = useUserContext();
   const userId = user?.id;
 
-  const submit = useCallback(
-    async (values: Record<string, unknown>) => {
+  const execute = useCallback(
+    async (values: EntityData) => {
       try {
         setLoading(true);
 
-        const queryStringParams = buildQueryString({ mode, window, tab });
+        const queryStringParams = buildQueryString({ mode, windowMetadata, tab });
+        const body = buildFormPayload({ values, oldValues: initialState, mode, csrfToken: userId });
         const url = `${tab.entityName}?${queryStringParams}`;
-        const options = {
-          signal: controller.current.signal,
-          method: 'POST',
-          body: {
-            dataSource: 'isc_OBViewDataSource_0',
-            operationType: mode === FormMode.NEW ? 'add' : 'update',
-            componentId: 'isc_OBViewForm_0',
-            data: {
-              accountingDate: new Date(),
-              ...values,
-            },
-            oldValues: {},
-            csrfToken: userId,
-          },
-        } as const;
-
+        const options = { signal: controller.current.signal, method: 'POST', body };
         const { ok, data } = await Metadata.datasourceServletClient.request(url, options);
 
         if (ok && data?.response?.status === 0 && !controller.current.signal.aborted) {
@@ -53,9 +51,11 @@ export const useFormAction = ({ window, tab, mode, onSuccess, onError }: UseForm
         onError?.(String(err));
       }
     },
-    [mode, onError, onSuccess, tab, userId, window],
+    [initialState, mode, onError, onSuccess, tab, userId, windowMetadata],
   );
 
+  const save = useMemo(() => submit(execute), [execute, submit]);
+
   useEffect(() => {
     const _controller = controller.current;
 
@@ -65,20 +65,5 @@ export const useFormAction = ({ window, tab, mode, onSuccess, onError }: UseForm
     };
   }, []);
 
-  return { submit, loading };
+  return { save, loading };
 };
-
-const buildQueryString = ({ mode, window, tab }: { window: WindowMetadata; tab: Tab; mode: FormMode }) =>
-  new URLSearchParams({
-    windowId: String(window.id),
-    tabId: String(tab.id),
-    moduleId: String(tab.module),
-    _operationType: mode === FormMode.NEW ? 'add' : 'update',
-    _noActiveFilter: String(true),
-    sendOriginalIDBack: String(true),
-    _extraProperties: '',
-    Constants_FIELDSEPARATOR: '$',
-    _className: 'OBViewDataSource',
-    Constants_IDENTIFIER: '_identifier',
-    isc_dataFormat: 'json',
-  });
diff --git a/packages/MainUI/hooks/useSelectFieldOptions.ts b/packages/MainUI/hooks/useSelectFieldOptions.ts
new file mode 100644
index 00000000..bfdc567b
--- /dev/null
+++ b/packages/MainUI/hooks/useSelectFieldOptions.ts
@@ -0,0 +1,32 @@
+import { useMemo } from 'react';
+import { useFormContext } from 'react-hook-form';
+import { EntityData, Field } from '@workspaceui/etendohookbinder/src/api/types';
+import { SelectProps } from '@/components/Form/FormView/selectors/components/types';
+
+export const useSelectFieldOptions = (field: Field, records: EntityData[]) => {
+  const { watch } = useFormContext();
+  const idKey = (field.selector?.valueField ?? '') as string;
+  const identifierKey = (field.selector?.displayField ?? '') as string;
+  const [currentValue, currentIdentifier] = watch([field.hqlName, field.hqlName + '$_identifier']);
+
+  return useMemo(() => {
+    const result: SelectProps['options'] = [];
+
+    records.forEach(record => {
+      const label = record[identifierKey] as string;
+      const id = record[idKey] as string;
+
+      if (id && label) {
+        result.push({ id, label });
+      }
+    });
+
+    const currentOption = result.find(record => record.id === currentValue);
+
+    if (!currentOption && currentValue && currentIdentifier) {
+      result.push({ id: currentValue, label: currentIdentifier });
+    }
+
+    return result;
+  }, [currentIdentifier, currentValue, idKey, identifierKey, records]);
+};
diff --git a/packages/MainUI/next.config.ts b/packages/MainUI/next.config.ts
index 7b3df14a..9bd31e40 100644
--- a/packages/MainUI/next.config.ts
+++ b/packages/MainUI/next.config.ts
@@ -1,6 +1,6 @@
-import type { NextConfig } from 'next';
+import { NextConfig } from 'next';
 
-const DEBUG_MODE = process.env.DEBUG_MODE === 'true';
+const DEBUG_MODE = process.env.DEBUG_MODE === 'true' || process.env.NODE_ENV === 'development';
 
 const nextConfig: NextConfig = {
   transpilePackages: ['@mui/material', '@mui/system', '@mui/icons-material', '@emotion/react', '@emotion/styled'],
@@ -28,24 +28,37 @@ const nextConfig: NextConfig = {
       minimize: !DEBUG_MODE,
     };
 
-    // Add support for SVGs
-    config.module.rules.push({
-      test: /\.svg$/,
-      issuer: /\.[jt]sx?$/,
-      oneOf: [
-        {
-          resourceQuery: /url/, // *.svg?url
-          type: 'asset/resource',
-          generator: {
-            filename: 'static/media/[name].[hash][ext]',
+    // Grab the existing rule that handles SVG imports
+    const fileLoaderRule = config.module.rules.find((rule: { test: { test: (arg0: string) => boolean } }) =>
+      rule.test?.test?.('.svg'),
+    );
+
+    config.module.rules.push(
+      // Reapply the existing rule, but only for svg imports ending in ?url
+      {
+        ...fileLoaderRule,
+        test: /\.svg$/i,
+        resourceQuery: /url/, // *.svg?url
+      },
+      // Convert all other *.svg imports to React components
+      {
+        test: /\.svg$/i,
+        issuer: fileLoaderRule.issuer,
+        resourceQuery: { not: [...fileLoaderRule.resourceQuery.not, /url/] }, // exclude if *.svg?url
+        use: [
+          {
+            loader: '@svgr/webpack',
+            options: {
+              dimensions: false,
+              expandProps: "start",
+            }
           },
-        },
-        {
-          loader: '@svgr/webpack',
-          options: { icon: true },
-        },
-      ],
-    });
+        ],
+      },
+    );
+
+    // Modify the file loader rule to ignore *.svg, since we have it handled now.
+    fileLoaderRule.exclude = /\.svg$/i;
 
     // Disable console.log removal
     if (config.optimization?.minimizer) {
diff --git a/packages/MainUI/screens/Loading/index.tsx b/packages/MainUI/screens/Loading/index.tsx
deleted file mode 100644
index b3f5ec2b..00000000
--- a/packages/MainUI/screens/Loading/index.tsx
+++ /dev/null
@@ -1,13 +0,0 @@
-import { CircularProgress } from '@mui/material';
-import { useTranslation } from '@/hooks/useTranslation';
-
-export default function LoadingScreen() {
-  const { t } = useTranslation();
-
-  return (
-    <div className="center-all flex-column">
-      <CircularProgress />
-      <span>{t('common.loading')}</span>
-    </div>
-  );
-}
diff --git a/packages/MainUI/screens/NewRecord/index.tsx b/packages/MainUI/screens/NewRecord/index.tsx
new file mode 100644
index 00000000..6424e941
--- /dev/null
+++ b/packages/MainUI/screens/NewRecord/index.tsx
@@ -0,0 +1,38 @@
+'use client';
+
+import { FormMode, Tab, WindowMetadata } from '@workspaceui/etendohookbinder/src/api/types';
+import Spinner from '@workspaceui/componentlibrary/src/components/Spinner';
+import { useTranslation } from '@/hooks/useTranslation';
+import { useFormInitialization } from '@/hooks/useFormInitialization';
+import { ErrorDisplay } from '@/components/ErrorDisplay';
+import FormView from '@/components/Form/FormView';
+import { useFormInitialState } from '@/hooks/useFormInitialState';
+
+export default function NewRecordPage({ window, tab }: { window: WindowMetadata; tab: Tab }) {
+  const { t } = useTranslation();
+  const { loading, formInitialization, refetch, error } = useFormInitialization({
+    tab,
+    mode: FormMode.NEW,
+  });
+  const initialState = useFormInitialState(formInitialization);
+
+  if (error) {
+    return (
+      <div className="mt-40">
+        <ErrorDisplay
+          title={t('errors.formData.title')}
+          description={error.message}
+          onRetry={refetch}
+          showRetry
+          showHomeButton
+        />
+      </div>
+    );
+  }
+
+  if (loading || !initialState) {
+    return <Spinner />;
+  }
+
+  return <FormView mode={FormMode.NEW} tab={tab} window={window} initialState={initialState} />;
+}
\ No newline at end of file
diff --git a/packages/MainUI/screens/Table/Dynamic.tsx b/packages/MainUI/screens/Table/Dynamic.tsx
index 898898c9..e499bf3c 100644
--- a/packages/MainUI/screens/Table/Dynamic.tsx
+++ b/packages/MainUI/screens/Table/Dynamic.tsx
@@ -1,18 +1,17 @@
-import React from 'react';
-import Spinner from '@workspaceui/componentlibrary/src/components/Spinner';
+import { useMemo } from 'react';
 import { useMetadataContext } from '../../hooks/useMetadataContext';
 import { TabLevel } from '../../components/TabLevel';
+import { ErrorDisplay } from '@/components/ErrorDisplay';
 
 export default function DynamicTableScreen() {
   const { loading, window, error, groupedTabs } = useMetadataContext();
+  const topLevelTabs = useMemo(() => groupedTabs.find(tabs => tabs[0].level === 0) || [], [groupedTabs]);
 
   if (loading) {
-    return <Spinner />;
+    return null;
   } else if (error || !window) {
-    return <div className="p-4 text-error-main">{error?.message ?? 'Something went wrong'}</div>;
+    return <ErrorDisplay title={error?.message ?? 'Something went wrong'} />;
   } else {
-    const topLevelTabs = groupedTabs.find(tabs => tabs[0].level === 0) || [];
-
     return (
       <div className="m-1 relative h-screen overflow-hidden ">
         {topLevelTabs.length > 0 && <TabLevel tab={topLevelTabs[0]} />}
diff --git a/packages/MainUI/tsconfig.json b/packages/MainUI/tsconfig.json
index 9fa30c9b..e356fc32 100644
--- a/packages/MainUI/tsconfig.json
+++ b/packages/MainUI/tsconfig.json
@@ -22,16 +22,19 @@
     "baseUrl": ".",
     "paths": {
       "@/*": ["./*"]
-    }
+    },
+    "typeRoots": ["./node_modules/@types", "./types"]
   },
   "include": [
+    "./types/svgr.d.ts",
+    "./types/theme.d.ts",
     "next-env.d.ts",
     "custom.d.ts",
     "./**/*.ts",
     "./**/*.tsx",
     ".next/types/**/*.ts",
-    "types/svgr.d.ts",
-    "types/theme.d.ts"
+    "./types/svgr.d.ts",
+    "./types/theme.d.ts"
   ],
   "exclude": ["node_modules"]
 }
diff --git a/packages/MainUI/utils/health-check.ts b/packages/MainUI/utils/health-check.ts
index 3d548b6b..7e938a47 100644
--- a/packages/MainUI/utils/health-check.ts
+++ b/packages/MainUI/utils/health-check.ts
@@ -18,7 +18,7 @@ export async function performHealthCheck(
         keepalive: false,
       });
 
-      if (response.ok) {
+      if (response.ok && !signal.aborted) {
         onSuccess();
 
         break;
@@ -30,7 +30,7 @@ export async function performHealthCheck(
 
       logger.warn(`Health check attempt ${attempt} failed:`, error);
 
-      if (attempt === maxAttempts) {
+      if (attempt === maxAttempts && !signal.aborted) {
         onError();
       }
 
diff --git a/packages/MainUI/utils/index.ts b/packages/MainUI/utils/index.ts
index 125f382c..8fb55570 100644
--- a/packages/MainUI/utils/index.ts
+++ b/packages/MainUI/utils/index.ts
@@ -1,4 +1,11 @@
-import { Field, FieldType } from '@workspaceui/etendohookbinder/src/api/types';
+import {
+  FieldType,
+  FormMode,
+  type EntityData,
+  type Field,
+  type Tab,
+  type WindowMetadata,
+} from '@workspaceui/etendohookbinder/src/api/types';
 
 export const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
 
@@ -59,27 +66,80 @@ export const buildPayloadByInputName = (values: Record<string, unknown>, fields?
 };
 
 export const parseDynamicExpression = (expr: string) => {
-  return expr
-    .replace(/OB\.Utilities\.getValue\((\w+),\s*["']([^"']+)["']\)/g, (_, obj, prop) => {
-      return `${obj}["${prop}"]`;
-    })
-
-    .replace(/context\.(\$?\w+)/g, (_, prop) => {
-      return `context.${prop}`;
-    })
-
-    .replace(/context\[\s*(['"])([^"'\]]+)\1\s*\]/g, (_, quote, prop) => {
-      return `context[${quote}${prop}${quote}]`;
-    })
-
-    .replace(/context\[\s*(['"])(.*?)\1\s*\]/g, (_, quote, key) => {
-      const transformedKey = transformDynamicKey(key);
-      return `context[${quote}${transformedKey}${quote}]`;
-    });
-};
+  const expr1 = expr.replace(/OB\.Utilities\.getValue\((\w+),\s*["']([^"']+)["']\)/g, (_, obj, prop) => {
+    return `${obj}["${prop}"]`;
+  });
+
+  const expr2 = expr1.replace(/context\.(\$?\w+)/g, (_, prop) => {
+    return `context.${prop}`;
+  });
+
+  const expr3 = expr2.replace(/context\[\s*(['"])([^"'\]]+)\1\s*\]/g, (_, quote, prop) => {
+    return `context[${quote}${prop}${quote}]`;
+  });
 
-const transformDynamicKey = (key: string): string => {
-  return key.replace(/\b([A-Z_$][A-Z0-9_$]*)\b/gi, (match: string) => {
-    return match === 'currentValues' ? match : match;
+  const expr4 = expr3.replace(/context\[\s*(['"])(.*?)\1\s*\]/g, (_, quote, key) => {
+    return `context[${quote}${key}${quote}]`;
   });
+
+  return expr4;
 };
+
+export const buildQueryString = ({
+  mode,
+  windowMetadata,
+  tab,
+}: {
+  windowMetadata: WindowMetadata;
+  tab: Tab;
+  mode: FormMode;
+}) =>
+  new URLSearchParams({
+    windowId: String(windowMetadata.id),
+    tabId: String(tab.id),
+    moduleId: String(tab.module),
+    _operationType: mode === FormMode.NEW ? 'add' : 'update',
+    _noActiveFilter: String(true),
+    sendOriginalIDBack: String(true),
+    _extraProperties: '',
+    Constants_FIELDSEPARATOR: '$',
+    _className: 'OBViewDataSource',
+    Constants_IDENTIFIER: '_identifier',
+    isc_dataFormat: 'json',
+  });
+
+export const buildFormPayload = ({
+  values,
+  oldValues,
+  mode,
+  csrfToken,
+}: {
+  values: EntityData;
+  oldValues: EntityData;
+  mode: FormMode;
+  csrfToken: string;
+}) => ({
+  dataSource: 'isc_OBViewDataSource_0',
+  operationType: mode === FormMode.NEW ? 'add' : 'update',
+  componentId: 'isc_OBViewForm_0',
+  data: {
+    accountingDate: new Date(),
+    ...values,
+  },
+  oldValues,
+  csrfToken,
+});
+
+export const buildRequestOptions = (
+  values: EntityData,
+  initialState: EntityData,
+  mode: FormMode,
+  userId: string,
+  signal: AbortSignal,
+) => ({
+  signal,
+  method: 'POST',
+  body: buildFormPayload({ values, oldValues: initialState, mode, csrfToken: userId }),
+});
+
+export const formatNumber = (value: number) => new Intl.NumberFormat(navigator.language).format(value);
diff --git a/packages/MainUI/utils/language.ts b/packages/MainUI/utils/language.ts
new file mode 100644
index 00000000..03a51f11
--- /dev/null
+++ b/packages/MainUI/utils/language.ts
@@ -0,0 +1,36 @@
+import { DEFAULT_LANGUAGE, translations, type Language } from '@workspaceui/componentlibrary/src/locales';
+
+export const t = (
+  language: Language,
+  key: string,
+  value: unknown = translations[language] ?? translations[DEFAULT_LANGUAGE],
+): string => {
+  if (!language) {
+    language = DEFAULT_LANGUAGE;
+  }
+
+  const keys = key.split('.');
+  const [currentKey, ...remainingKeys] = keys;
+
+  if (typeof value !== 'object' || value === null || !(currentKey in value)) {
+    return key;
+  }
+
+  const nextValue = value[currentKey as keyof typeof value];
+
+  if (remainingKeys.length === 0) {
+    return typeof nextValue === 'string' ? nextValue : key;
+  }
+
+  return t(language, remainingKeys.join('.'), nextValue);
+};
+
+export const getLanguage = (): Language => {
+  if (typeof window !== 'undefined') {
+    const savedLanguage = localStorage.getItem('currentLanguage');
+
+    return (savedLanguage as Language) || DEFAULT_LANGUAGE;
+  }
+
+  return DEFAULT_LANGUAGE;
+};
-- 
2.45.2

